@page "/users"
@attribute [AllowAnonymous]

@inject IExceptionHandler ExceptionHandler
@inject IUserApiClient UserApiClient
@inject IDialogService DialogService
@inject IStringLocalizer<App> Localizer
@inject NavigationManager NavigationManager

<PageTitle>
    @Localizer[nameof(AppStrings.Users)]
</PageTitle>

<FritzBreadcrumbs Items="_items" />

<MudTable ServerData="new Func<TableState, Task<TableData<UserDto>>>(ServerReload)"
          Dense="true"
          Hover="true"
          @ref="table"
          Context="user">
    <ToolBarContent>
        <MudText Typo="Typo.h6">
            @Localizer[nameof(AppStrings.Users)]
        </MudText>
        <MudSpacer />
        <FritzSearchTextField @bind-Value="searchString"
                              OnSearch="() => table.ReloadServerData()" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="username"
                               T="UserDto">
                @Localizer[nameof(AppStrings.UserName)]
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="email"
                               T="UserDto">
                @Localizer[nameof(AppStrings.Email)]
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            @Localizer[nameof(AppStrings.Role)]
        </MudTh>
        <MudTh>
            @Localizer[nameof(AppStrings.Playlists)]
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="UserName">
            @user.UserName
        </MudTd>
        <MudTd DataLabel="Email">
            @user.Email
        </MudTd>
        <MudTh>
            <MudChip Variant="Variant.Outlined"
                     Color="GetColorBasedOnPolicy(GetUserHighestPolicy(user))">
                @GetUserHighestPolicy(user)
            </MudChip>
        </MudTh>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.List"
                           Size="Size.Small"
                           OnClick="() => RedirectToUserPlaylistsPage(user.Id)" />
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>
            @Localizer[nameof(AppStrings.NoMatchingRecordsFound)]
        </MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>
            @Localizer[nameof(AppStrings.Loading)]
        </MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager RowsPerPageString="@Localizer[nameof(AppStrings.RowsPerPage)]"
                       InfoFormat="@Localizer[nameof(AppStrings.PaginationInfoFormat)]" />
    </PagerContent>
</MudTable>

@code {
    private List<BreadcrumbItem> _items;

    private string searchString = "";
    private MudTable<UserDto> table;
    private PagedList<UserDto> MyUsers { get; set; }

    protected override void OnParametersSet()
    {
        _items = new()
        {
            new(Localizer[nameof(AppStrings.Users)], href: null, disabled: true),
        };
    }

    private async Task<TableData<UserDto>> ServerReload(TableState state)
    {
        var query = new GetAllUsers.Query
            {
                Page = state.Page + 1,
                PageSize = state.PageSize,
                SortColumn = state.SortLabel,
                SortOrder = ((SortOrder)state.SortDirection),
                SearchTerm = searchString,
            };

        try
        {
            MyUsers = await UserApiClient.GetAllUsers(query);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
            return new() { TotalItems = 0, Items = [] };
        }

        return new()
            {
                TotalItems = MyUsers.TotalCount,
                Items = MyUsers.Items
            };
    }

    private string GetUserHighestPolicy(UserDto user)
    {
        if (user.IsAdmin)
            return Policy.Admin;

        return Policy.User;
    }

    private Color GetColorBasedOnPolicy(string policy)
    {
        if (policy == Policy.Admin)
            return Color.Error;

        return Color.Success;
    }

    private void RedirectToUserPlaylistsPage(int id)
    {
        NavigationManager.NavigateTo($"/playlists/{id}");
    }
}
