@page "/links/{UserId:int}/{PlaylistId:int}"
@attribute [AllowAnonymous]

@inject IExceptionHandler ExceptionHandler
@inject ILinkApiClient LinkApiClient
@inject IPlaylistApiClient PlaylistApiClient
@inject IAuthService AuthService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<App> Localizer
@inject IJSRuntime JSRuntime

<PageTitle>
    @Localizer[nameof(AppStrings.Links)]
</PageTitle>

<FritzBreadcrumbs Items="_items" />

<MudStack>
    @if (_isUserPlaylist)
    {
        <MudPaper Class="pa-4">
            <MudText Class="mb-3">
                @Localizer[nameof(AppStrings.CreateLink)]
            </MudText>
            <CreateLinkForm Command="CreateLinkCommand"
                            ParentReloadFunction="(async () => await RefreshView())" />
        </MudPaper>
    }

    @if (_tableView)
    {
        <MudTable ServerData="new Func<TableState, Task<TableData<LinkDto>>>(ServerReload)"
                  @ref="table"
                  Dense="true"
                  Hover="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6">
                    @Localizer[nameof(AppStrings.Links)]
                </MudText>
                <AuthorizeView Policy="@Policy.User">
                    <Authorized>
                        @if (_isUserPlaylist)
                        {
                            <MudTooltip Text="@Localizer[nameof(AppStrings.ResetPlaylistLinksDownloadedFlag)]">
                                <MudIconButton Icon="@Icons.Material.Filled.Flag"
                                               Color="Color.Info"
                                               Size="Size.Small"
                                               OnClick="() => ResetPlaylistLinksDownloadedFlag()" />
                            </MudTooltip>
                        }
                        @if (_tableView)
                        {
                            <MudTooltip Text="@Localizer[nameof(AppStrings.SwitchViewToGrid)]">
                                <MudIconButton Icon="@Icons.Material.Filled.GridView"
                                               Color="Color.Info"
                                               Size="Size.Small"
                                               OnClick="SwitchView" />
                            </MudTooltip>
                            <MudSpacer />
                        }
                        else
                        {
                            <MudTooltip Text="@Localizer[nameof(AppStrings.SwitchViewToTable)]">
                                <MudIconButton Icon="@Icons.Material.Filled.ViewList"
                                               Color="Color.Info"
                                               Size="Size.Small"
                                               OnClick="SwitchView" />
                            </MudTooltip>
                            <MudSpacer />
                        }
                    </Authorized>
                </AuthorizeView>
                <MudSpacer />
                <FritzSearchTextField @bind-Value="searchString"
                                      OnSearch="(async () => await RefreshView())" />
            </ToolBarContent>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortLabel="title"
                                       T="LinkDto">
                        @Localizer[nameof(AppStrings.Title)]
                    </MudTableSortLabel>
                </MudTh>
                <AuthorizeView Policy="@Policy.User">
                    <Authorized>
                        @if (_isUserPlaylist)
                        {
                            <MudTh>
                                @Localizer[nameof(AppStrings.Downloaded)]
                            </MudTh>
                        }
                    </Authorized>
                </AuthorizeView>
                <MudTh>
                    @Localizer[nameof(AppStrings.Actions)]
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Title">
                    @context.Title
                </MudTd>
                <AuthorizeView Policy="@Policy.User" Context="auth">
                    <Authorized>
                        @if (_isUserPlaylist)
                        {
                            <MudTd DataLabel="Downloaded">
                                @if (context.Downloaded)
                                {
                                    <MudTooltip Text="@Localizer[nameof(AppStrings.Downloaded)]">
                                        <MudIcon Icon="@Icons.Material.Filled.FileDownloadDone"
                                                 Color="Color.Success" />
                                    </MudTooltip>
                                }
                                else
                                {
                                    <MudTooltip Text="@Localizer[nameof(AppStrings.NotDownloaded)]">
                                        <MudIcon Icon="@Icons.Material.Filled.FileDownload"
                                                 Color="Color.Error" />
                                    </MudTooltip>
                                }
                            </MudTd>
                        }
                    </Authorized>
                </AuthorizeView>
                <MudTd>
                    <FritzCopyToClipboardButton TooltipText="@Localizer[nameof(AppStrings.CopyUrlToClipboard)]"
                                                Color="Color.Info"
                                                Size="Size.Small"
                                                CopiedText="@context.Url" />
                    <MudTooltip Text="@Localizer[nameof(AppStrings.DownloadToMp3)]">
                        <MudIconButton Icon="@Icons.Material.Filled.Download"
                                       Color="Color.Info"
                                       Size="Size.Small"
                                       Disabled=_disableDownloadPlaylistLinkButtons
                                       OnClick="() => DownloadPlaylistLink(context.Id, DownloadLink.YoutubeFileType.MP3)" />
                    </MudTooltip>
                    <MudTooltip Text="@Localizer[nameof(AppStrings.DownloadToMp4)]">
                        <MudIconButton Icon="@Icons.Material.Filled.VideoLibrary"
                                       Color="Color.Info"
                                       Size="Size.Small"
                                       Disabled=_disableDownloadPlaylistLinkButtons
                                       OnClick="() => DownloadPlaylistLink(context.Id, DownloadLink.YoutubeFileType.MP4)" />
                    </MudTooltip>
                    <AuthorizeView Policy="@Policy.User" Context="auth">
                        <Authorized>
                            @if (_isUserPlaylist)
                            {
                                <MudTooltip Text="@Localizer[nameof(AppStrings.UpdateLink)]">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                                   Color="Color.Warning"
                                                   Size="Size.Small"
                                                   OnClick="() => UpdatePlaylistLink(context)" />
                                </MudTooltip>
                                <MudTooltip Text="@Localizer[nameof(AppStrings.DeleteLink)]">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                   Color="Color.Warning"
                                                   Size="Size.Small"
                                                   OnClick="() => DeletePlaylistLink(context.Id)" />
                                </MudTooltip>
                            }
                        </Authorized>
                    </AuthorizeView>
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>
                    @Localizer[nameof(AppStrings.NoMatchingRecordsFound)]
                </MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>
                    @Localizer[nameof(AppStrings.Loading)]
                </MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager RowsPerPageString="@Localizer[nameof(AppStrings.RowsPerPage)]"
                               InfoFormat="@Localizer[nameof(AppStrings.PaginationInfoFormat)]" />
            </PagerContent>
        </MudTable>
    }
    else
    {
        if (LinkPagedList != null)
        {
            <MudPaper Class="pa-4">
                <MudStack Row=true>
                    <MudText>
                        @Localizer[nameof(AppStrings.Links)]
                    </MudText>
                    <AuthorizeView Policy="@Policy.User">
                        <Authorized>
                            @if (_isUserPlaylist)
                            {
                                <MudTooltip Text="@Localizer[nameof(AppStrings.ResetPlaylistLinksDownloadedFlag)]">
                                    <MudIconButton Icon="@Icons.Material.Filled.Flag"
                                                   Color="Color.Info"
                                                   Size="Size.Small"
                                                   OnClick="() => ResetPlaylistLinksDownloadedFlag()" />
                                </MudTooltip>
                            }
                        </Authorized>
                    </AuthorizeView>
                    @if (_tableView)
                    {
                        <MudTooltip Text="@Localizer[nameof(AppStrings.SwitchViewToGrid)]">
                            <MudIconButton Icon="@Icons.Material.Filled.GridView"
                                           Color="Color.Info"
                                           Size="Size.Small"
                                           OnClick="SwitchView" />
                        </MudTooltip>
                        <MudSpacer />
                    }
                    else
                    {
                        <MudTooltip Text="@Localizer[nameof(AppStrings.SwitchViewToTable)]">
                            <MudIconButton Icon="@Icons.Material.Filled.ViewList"
                                           Color="Color.Info"
                                           Size="Size.Small"
                                           OnClick="SwitchView" />
                        </MudTooltip>
                        <MudSpacer />
                    }
                </MudStack>
                <FritzSearchTextField @bind-Value="searchString"
                                      OnSearch="(async () => await RefreshView())" />
            </MudPaper>
            <MudGrid Spacing="2">
                @foreach (var link in LinkPagedList.Items)
                {
                    <MudItem xs="12" sm="6">
                        <MudCard>
                            @if (!string.IsNullOrWhiteSpace(link.Url))
                            {
                                <iframe src="@ConvertToEmbedUrl(link.Url)" style="height: 300px" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
                            }
                            <MudCardContent>
                                <MudText Typo="Typo.body1">
                                    @link.Title
                                </MudText>
                            </MudCardContent>
                            <MudCardActions>
                                @if (link.Downloaded)
                                {
                                    <MudTooltip Text="@Localizer[nameof(AppStrings.Downloaded)]">
                                        <MudIconButton Icon="@Icons.Material.Filled.FileDownloadDone"
                                                       Color="Color.Success"
                                                       Size="Size.Medium" />
                                    </MudTooltip>
                                    <MudSpacer />
                                }
                                else
                                {
                                    <MudTooltip Text="@Localizer[nameof(AppStrings.NotDownloaded)]">
                                        <MudIconButton Icon="@Icons.Material.Filled.FileDownload"
                                                       Color="Color.Error"
                                                       Size="Size.Medium" />
                                    </MudTooltip>
                                    <MudSpacer />
                                }
                                <FritzCopyToClipboardButton TooltipText="@Localizer[nameof(AppStrings.CopyUrlToClipboard)]"
                                                            Color="Color.Info"
                                                            CopiedText="@link.Url"
                                                            Size="Size.Medium" />
                                <MudTooltip Text="@Localizer[nameof(AppStrings.DownloadToMp3)]">
                                    <MudIconButton Icon="@Icons.Material.Filled.Download"
                                                   Color="Color.Info"
                                                   Size="Size.Medium"
                                                   Disabled=_disableDownloadPlaylistLinkButtons
                                                   OnClick="() => DownloadPlaylistLink(link.Id, DownloadLink.YoutubeFileType.MP3)" />
                                </MudTooltip>
                                <MudTooltip Text="@Localizer[nameof(AppStrings.DownloadToMp4)]">
                                    <MudIconButton Icon="@Icons.Material.Filled.VideoLibrary"
                                                   Color="Color.Info"
                                                   Size="Size.Medium"
                                                   Disabled=_disableDownloadPlaylistLinkButtons
                                                   OnClick="() => DownloadPlaylistLink(link.Id, DownloadLink.YoutubeFileType.MP4)" />
                                </MudTooltip>
                                <AuthorizeView Policy="@Policy.User" Context="auth">
                                    <Authorized>
                                        @if (_isUserPlaylist)
                                        {
                                            <MudSpacer />
                                            <MudTooltip Text="@Localizer[nameof(AppStrings.UpdateLink)]">
                                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                                               Color="Color.Warning"
                                                               Size="Size.Medium"
                                                               OnClick="() => UpdatePlaylistLink(link)" />
                                            </MudTooltip>
                                            <MudTooltip Text="@Localizer[nameof(AppStrings.DeleteLink)]">
                                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                               Color="Color.Warning"
                                                               Size="Size.Medium"
                                                               OnClick="() => DeletePlaylistLink(link.Id)" />
                                            </MudTooltip>
                                        }
                                    </Authorized>
                                </AuthorizeView>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>

            <MudPaper Class="pa-4 mb-4">
                <MudStack AlignItems="AlignItems.Center">
                    <MudPagination @ref="_paginator"
                                   Color="Color.Primary"
                                   Count="LinkPagedList.PagesCount"
                                   SelectedChanged="Paginate"
                                   ShowFirstButton=true
                                   ShowLastButton=true />
                </MudStack>
            </MudPaper>
        }
    }
</MudStack>

@code {
    [Parameter] public int UserId { get; set; }
    [Parameter] public int PlaylistId { get; set; }

    private CreateLink.Command CreateLinkCommand { get; set; }
    private List<BreadcrumbItem> _items;
    private string searchString = "";
    private MudTable<LinkDto> table;
    private PagedList<LinkDto> LinkPagedList { get; set; }
    private bool _isUserPlaylist = false;
    private bool _tableView = true;
    private GetAllPaginatedLinks.Query query = new();
    private MudPagination _paginator;
    private bool _disableDownloadPlaylistLinkButtons;

    private async Task Paginate(int page)
    {
        query.Page = page;
        await RefreshView();
    }

    protected override async Task OnParametersSetAsync()
    {
        _items = new()
        {
            new(Localizer[nameof(AppStrings.Users)], href: $"/users"),
            new(Localizer[nameof(AppStrings.Playlists)], href: $"/playlists/{UserId}"),
            new(Localizer[nameof(AppStrings.Links)], href: null, disabled: true),
        };

        _isUserPlaylist = await AuthService.IsLoggedInUser(UserId);

        CreateLinkCommand = new CreateLink.Command
            {
                PlaylistId = PlaylistId,
                Url = "",
            };

        query = new GetAllPaginatedLinks.Query()
            {
                Page = 1,
                PageSize = 10,
                SortColumn = "title",
                SortOrder = SortOrder.Ascending,
                SearchTerm = searchString,
                PlaylistId = PlaylistId,
            };

        await RefreshView();
    }

    private async Task RefreshView()
    {
        if (_tableView)
            await table.ReloadServerData();
        else
            await ReloadLinks();
    }

    private void SwitchView()
    {
        _tableView = !_tableView;
    }

    private async Task ReloadLinks()
    {
        try
        {
            query.SearchTerm = searchString;
            LinkPagedList = await LinkApiClient.GetAllPaginatedLinks(query);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
        }
    }

    private async Task<TableData<LinkDto>> ServerReload(TableState state)
    {
        query = new GetAllPaginatedLinks.Query
            {
                Page = state.Page + 1,
                PageSize = state.PageSize,
                SortColumn = state.SortLabel,
                SortOrder = ((SortOrder)state.SortDirection),
                SearchTerm = searchString,
                PlaylistId = PlaylistId,
            };

        // if (_paginator != null)
        // {
        //     query.Page = _paginator.Selected;
        // }

        try
        {
            LinkPagedList = await LinkApiClient.GetAllPaginatedLinks(query);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
            return new() { TotalItems = 0, Items = [] };
        }

        return new()
            {
                TotalItems = LinkPagedList.TotalCount,
                Items = LinkPagedList.Items
            };
    }

    private async Task DeletePlaylistLink(int id)
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<DeleteDialog>(Localizer[nameof(AppStrings.Delete)], options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            try
            {
                await LinkApiClient.DeleteLink(id);
                await RefreshView();
            }
            catch (Exception ex)
            {
                ExceptionHandler.HandleExceptions(ex);
            }
        }
    }

    private async Task UpdatePlaylistLink(LinkDto linkDto)
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<UpdateLinkDialog>();
        parameters.Add(x => x.Command, new()
            {
                Id = linkDto.Id,
                Url = linkDto.Url,
                Downloaded = linkDto.Downloaded,
            });

        var dialog = await DialogService.ShowAsync<UpdateLinkDialog>(Localizer[nameof(AppStrings.UpdateLink)], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
            await RefreshView();
    }

    private static string ConvertToEmbedUrl(string url)
        => url.Replace("/watch?v=", "/embed/");

    private async Task DownloadPlaylistLink(int id, DownloadLink.YoutubeFileType youtubeFileType)
    {
        _disableDownloadPlaylistLinkButtons = true;

        try
        {
            var command = new DownloadLink.DownloadLinkCommand
                {
                    Id = id,
                    YoutubeFileType = youtubeFileType,
                };

            var response = await LinkApiClient.DownloadLink(command);
            var content = await response.Content.ReadAsByteArrayAsync();
            var filename = response.Content.Headers.ContentDisposition.FileNameStar ?? $"default_name.{YoutubeFileTypeToString(command.YoutubeFileType)}";

            await JSRuntime.InvokeVoidAsync("downloadFile", filename, content);
            await RefreshView();
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
        }
        finally
        {
            _disableDownloadPlaylistLinkButtons = false;
        }
    }

    private string YoutubeFileTypeToString(DownloadLink.YoutubeFileType youtubeFileType)
    {
        return youtubeFileType switch
        {
            DownloadLink.YoutubeFileType.MP4 => "mp4",
            _ => "mp3",
        };
    }

    private async Task ResetPlaylistLinksDownloadedFlag()
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<InformationDialog>(Localizer[nameof(AppStrings.ResetPlaylistLinksDownloadedFlag)], options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            try
            {
                var command = new ResetLinksDownloadedFlag.Command
                    {
                        Id = PlaylistId,
                        IsDownloaded = false,
                    };

                await PlaylistApiClient.ResetLinksDownloadedFlag(command);
                await RefreshView();
            }
            catch (Exception ex)
            {
                ExceptionHandler.HandleExceptions(ex);
            }
        }
    }
}
