@page "/links/{UserId:int}/{PlaylistId:int}"
@attribute [AllowAnonymous]

@inject IExceptionHandler ExceptionHandler
@inject ILinkApiClient LinkApiClient
@inject IAuthService AuthService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<App> Localizer
@inject IJSRuntime JSRuntime

<PageTitle>
    @Localizer[nameof(AppStrings.Links)]
</PageTitle>

<FritzBreadcrumbs Items="_items" />

<MudTable ServerData="new Func<TableState, Task<TableData<LinkDto>>>(ServerReload)"
          @ref="table"
          Dense="true"
          Hover="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">
            @Localizer[nameof(AppStrings.Links)]
        </MudText>
        <AuthorizeView Policy="@Policy.User">
            <Authorized>
                @if (_isUserPlaylist)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Add"
                                   Size="Size.Small"
                                   OnClick="() => CreatePlaylistLink()" />
                }
            </Authorized>
        </AuthorizeView>
        <MudSpacer />
        <FritzSearchTextField @bind-Value="searchString"
                              OnSearch="() => table.ReloadServerData()" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            @Localizer[nameof(AppStrings.YoutubeVideo)]
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="title"
                               T="LinkDto">
                @Localizer[nameof(AppStrings.Title)]
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            @Localizer[nameof(AppStrings.VideoId)]
        </MudTh>
        <AuthorizeView Policy="@Policy.User">
            <Authorized>
                @if (_isUserPlaylist)
                {
                    <MudTh>
                        @Localizer[nameof(AppStrings.Downloaded)]
                    </MudTh>
                }
            </Authorized>
        </AuthorizeView>
        <MudTh>
            @Localizer[nameof(AppStrings.Actions)]
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            @if (!string.IsNullOrWhiteSpace(context.Url))
            {
                <iframe src="@ConvertToEmbedUrl(context.Url)" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
            }
        </MudTd>
        <MudTd DataLabel="Title">
            @context.Title
        </MudTd>
        <MudTd DataLabel="VideoId">
            @context.VideoId
        </MudTd>
        <AuthorizeView Policy="@Policy.User" Context="auth">
            <Authorized>
                @if (_isUserPlaylist)
                {
                    <MudTd DataLabel="Downloaded">
                        @context.Downloaded
                    </MudTd>
                }
            </Authorized>
        </AuthorizeView>
        <MudTd>
            <FritzCopyToClipboardButton TooltipText="@Localizer[nameof(AppStrings.CopyUrlToClipboard)]"
                                        CopiedText="@context.Url" />
            <MudIconButton Icon="@Icons.Material.Filled.Download"
                           Size="Size.Small"
                           OnClick="() => DownloadPlaylistLink(context.Id)" />
            <AuthorizeView Policy="@Policy.User" Context="auth">
                <Authorized>
                    @if (_isUserPlaylist)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       Size="Size.Small"
                                       OnClick="() => UpdatePlaylistLink(context)" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                       Size="Size.Small"
                                       OnClick="() => DeletePlaylistLink(context.Id)" />
                    }
                </Authorized>
            </AuthorizeView>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>
            @Localizer[nameof(AppStrings.NoMatchingRecordsFound)]
        </MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>
            @Localizer[nameof(AppStrings.Loading)]
        </MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager RowsPerPageString="@Localizer[nameof(AppStrings.RowsPerPage)]"
                       InfoFormat="@Localizer[nameof(AppStrings.PaginationInfoFormat)]" />
    </PagerContent>
</MudTable>

@code {
    [Parameter] public int UserId { get; set; }
    [Parameter] public int PlaylistId { get; set; }

    private List<BreadcrumbItem> _items;
    private string searchString = "";
    private MudTable<LinkDto> table;
    private PagedList<LinkDto> LinkPagedList { get; set; }
    private bool _isUserPlaylist = false;

    protected override async Task OnParametersSetAsync()
    {
        _items = new()
        {
            new(Localizer[nameof(AppStrings.Users)], href: $"/users"),
            new(Localizer[nameof(AppStrings.Playlists)], href: $"/playlists/{UserId}"),
            new(Localizer[nameof(AppStrings.Links)], href: null, disabled: true),
        };

        _isUserPlaylist = await AuthService.IsLoggedInUser(UserId);
    }

    private async Task<TableData<LinkDto>> ServerReload(TableState state)
    {
        var query = new GetAllLinks.Query
            {
                Page = state.Page + 1,
                PageSize = state.PageSize,
                SortColumn = state.SortLabel,
                SortOrder = ((SortOrder)state.SortDirection),
                SearchTerm = searchString,
                PlaylistId = PlaylistId,
            };

        try
        {
            LinkPagedList = await LinkApiClient.GetAllLinks(query);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
            return new() { TotalItems = 0, Items = [] };
        }

        return new()
            {
                TotalItems = LinkPagedList.TotalCount,
                Items = LinkPagedList.Items
            };
    }

    private async Task DeletePlaylistLink(int id)
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<DeleteDialog>(Localizer[nameof(AppStrings.Delete)], options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            try
            {
                await LinkApiClient.DeleteLink(id);
                await table.ReloadServerData();
            }
            catch (Exception ex)
            {
                ExceptionHandler.HandleExceptions(ex);
            }
        }
    }

    private async Task UpdatePlaylistLink(LinkDto linkDto)
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<UpdateLinkDialog>();
        parameters.Add(x => x.Command, new()
            {
                Id = linkDto.Id,
                Url = linkDto.Url,
                Downloaded = linkDto.Downloaded,
            });

        var dialog = await DialogService.ShowAsync<UpdateLinkDialog>(Localizer[nameof(AppStrings.UpdateLink)], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }

    private async Task CreatePlaylistLink()
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<CreateLinkDialog>();
        parameters.Add(x => x.Command, new()
            {
                Url = "",
                PlaylistId = PlaylistId,
            });

        var dialog = await DialogService.ShowAsync<CreateLinkDialog>(Localizer[nameof(AppStrings.CreateLink)], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }

    private static string ConvertToEmbedUrl(string url)
        => url.Replace("/watch?v=", "/embed/");

    private async Task DownloadPlaylistLink(int id)
    {
        var response = await LinkApiClient.DownloadLink(id);
        var content = await response.Content.ReadAsByteArrayAsync();
        var filename = response.Content.Headers.ContentDisposition.FileNameStar ?? "default_name.mp3";

        await JSRuntime.InvokeVoidAsync("downloadFile", filename, content);
    }
}
