@page "/playlists/{UserId:int}"
@attribute [AllowAnonymous]

@inject IExceptionHandler ExceptionHandler
@inject IPlaylistApiClient PlaylistApiClient
@inject IAuthService AuthService
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<App> Localizer
@inject IJSRuntime JSRuntime

<PageTitle>
    @Localizer[nameof(AppStrings.Playlists)]
</PageTitle>

<FritzBreadcrumbs Items="_items" />

<MudTable ServerData="new Func<TableState, Task<TableData<PlaylistDto>>>(ServerReload)"
          @ref="table"
          Dense="true"
          Hover="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">
            @Localizer[nameof(AppStrings.Playlists)]
        </MudText>
        <AuthorizeView Policy="@Policy.User">
            <Authorized>
                @if (_isUserPlaylist)
                {
                    <MudTooltip Text="@Localizer[nameof(AppStrings.CreatePlaylist)]">
                        <MudIconButton Icon="@Icons.Material.Filled.Add"
                                       Size="Size.Small"
                                       OnClick="() => CreateUserPlaylist()" />
                    </MudTooltip>
                    <MudTooltip Text="@Localizer[nameof(AppStrings.ImportPlaylistFromJson)]">
                        <MudIconButton Icon="@Icons.Material.Filled.ImportExport"
                                       Size="Size.Small"
                                       OnClick="() => ImportPlaylistFromJSON()" />
                    </MudTooltip>
                }
            </Authorized>
        </AuthorizeView>
        <MudSpacer />
        <FritzSearchTextField @bind-Value="searchString"
                              OnSearch="() => table.ReloadServerData()" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="name"
                               T="PlaylistDto">
                @Localizer[nameof(AppStrings.Name)]
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            @Localizer[nameof(AppStrings.Public)]
        </MudTh>
        <MudTh>
            @Localizer[nameof(AppStrings.Links)]
        </MudTh>
        <MudTh>
            @Localizer[nameof(AppStrings.Actions)]
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">
            @context.Name
        </MudTd>
        <MudTd DataLabel="Public">
            @if (context.Public)
            {
                <MudTooltip Text="@Localizer[nameof(AppStrings.Public)]">
                    <MudIcon Icon="@Icons.Material.Filled.Visibility" />
                </MudTooltip>
            }
            else
            {
                <MudTooltip Text="@Localizer[nameof(AppStrings.Private)]">
                    <MudIcon Icon="@Icons.Material.Filled.VisibilityOff" />
                </MudTooltip>
            }
        </MudTd>
        <MudTd>
            <MudTooltip Text="@Localizer[nameof(AppStrings.Links)]">
                <MudIconButton Icon="@Icons.Material.Filled.List"
                               Size="Size.Small"
                               OnClick="() => RedirectToLinksPage(context.Id)" />
            </MudTooltip>
        </MudTd>
        <MudTd>
            <MudTooltip Text="@Localizer[nameof(AppStrings.ExportPlaylistToJson)]">
                <MudIconButton Icon="@Icons.Material.Filled.Save"
                               Size="Size.Small"
                               OnClick="() => ExportPlaylistToJSON(context.Id)" />
            </MudTooltip>
            <MudTooltip Text="@Localizer[nameof(AppStrings.DownloadPlaylist)]">
                <MudIconButton Icon="@Icons.Material.Filled.Download"
                               Size="Size.Small"
                               OnClick="() => RedirectToDownloadPlaylistPage(context.Id)" />
            </MudTooltip>
            <AuthorizeView Policy="@Policy.User" Context="auth">
                <Authorized>
                    @if (_isUserPlaylist)
                    {
                        <MudTooltip Text="@Localizer[nameof(AppStrings.UpdatePlaylist)]">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                           Size="Size.Small"
                                           OnClick="() => UpdateUserPlaylist(context)" />
                        </MudTooltip>
                        <MudTooltip Text="@Localizer[nameof(AppStrings.DeletePlaylist)]">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           Size="Size.Small"
                                           OnClick="() => DeleteUserPlaylist(context.Id)" />
                        </MudTooltip>
                    }
                </Authorized>
            </AuthorizeView>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>
            @Localizer[nameof(AppStrings.NoMatchingRecordsFound)]
        </MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>
            @Localizer[nameof(AppStrings.Loading)]
        </MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager RowsPerPageString="@Localizer[nameof(AppStrings.RowsPerPage)]"
                       InfoFormat="@Localizer[nameof(AppStrings.PaginationInfoFormat)]" />
    </PagerContent>
</MudTable>

@code {
    [Parameter] public int UserId { get; set; }

    private List<BreadcrumbItem> _items;
    private string searchString = "";
    private MudTable<PlaylistDto> table;
    private PagedList<PlaylistDto> PlaylistPagedList { get; set; }
    private bool _isUserPlaylist = false;

    protected override async void OnParametersSet()
    {
        _items = new()
        {
            new(Localizer[nameof(AppStrings.Users)], href: $"/users"),
            new(Localizer[nameof(AppStrings.Playlists)], href: null, disabled: true),
        };

        _isUserPlaylist = await AuthService.IsLoggedInUser(UserId);
    }

    private async Task<TableData<PlaylistDto>> ServerReload(TableState state)
    {
        var query = new GetAllUserPlaylists.Query
            {
                Page = state.Page + 1,
                PageSize = state.PageSize,
                SortColumn = state.SortLabel,
                SortOrder = ((SortOrder)state.SortDirection),
                SearchTerm = searchString,
                UserId = UserId,
            };

        try
        {
            PlaylistPagedList = await PlaylistApiClient.GetAllUserPlaylists(query);
        }
        catch (Exception ex)
        {
            ExceptionHandler.HandleExceptions(ex);
            return new() { TotalItems = 0, Items = [] };
        }

        return new()
            {
                TotalItems = PlaylistPagedList.TotalCount,
                Items = PlaylistPagedList.Items
            };
    }

    private void RedirectToLinksPage(int id)
    {
        NavigationManager.NavigateTo($"/links/{UserId}/{id}");
    }

    private void RedirectToDownloadPlaylistPage(int id)
    {
        NavigationManager.NavigateTo($"/downloadPlaylist/{id}");
    }

    private async Task DeleteUserPlaylist(int id)
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var dialog = await DialogService.ShowAsync<DeleteDialog>(Localizer[nameof(AppStrings.Delete)], options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            try
            {
                await PlaylistApiClient.DeletePlaylist(id);
                await table.ReloadServerData();
            }
            catch (Exception ex)
            {
                ExceptionHandler.HandleExceptions(ex);
            }
        }
    }

    private async Task UpdateUserPlaylist(PlaylistDto playlistDto)
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<UpdatePlaylistDialog>();
        parameters.Add(x => x.Command, new()
            {
                Id = playlistDto.Id,
                Name = playlistDto.Name,
                Public = playlistDto.Public,
            });

        var dialog = await DialogService.ShowAsync<UpdatePlaylistDialog>(Localizer[nameof(AppStrings.UpdatePlaylist)], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }

    private async Task CreateUserPlaylist()
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<CreatePlaylistDialog>();
        parameters.Add(x => x.Command, new()
            {
                Name = "",
                Public = true,
            });

        var dialog = await DialogService.ShowAsync<CreatePlaylistDialog>(Localizer[nameof(AppStrings.CreatePlaylist)], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }

    private async Task ExportPlaylistToJSON(int id)
    {
        var command = new ExportPlaylistToJson.Command
            {
                Id = id,
            };

        var response = await PlaylistApiClient.ExportPlaylistToJson(command);
        var content = await response.Content.ReadAsByteArrayAsync();
        var filename = response.Content.Headers.ContentDisposition.FileNameStar ?? $"default_name.json";

        await JSRuntime.InvokeVoidAsync("downloadFile", filename, content);
    }

    private async Task ImportPlaylistFromJSON()
    {
        var options = new DialogOptions() { CloseOnEscapeKey = true, CloseButton = true };
        var parameters = new DialogParameters<ImportPlaylistDialog>();
        parameters.Add(x => x.FormModel, new()
            {
                Name = "",
                Public = true,
                ExportedLinks = new List<ExportPlaylistToJson.ExportedLinkModel>(),
                File = null,
            });

        var dialog = await DialogService.ShowAsync<ImportPlaylistDialog>(Localizer[nameof(AppStrings.ImportPlaylist)], parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
            await table.ReloadServerData();
    }
}
